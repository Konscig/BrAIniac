// Prisma schema for graph models migrated from Go
// Place this file as backend/prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String      @id @default(uuid())
  email            String     @unique
  username         String     @unique
  passwordHash     String
  role             String     @default("user")
  tokenValidAfter  DateTime   @default(now())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?
  refreshTokens    RefreshToken[]
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  userId     String
  tokenHash  String
  userAgent  String?
  ipAddress  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expired    Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @default(uuid())
  ownerId     String
  name        String   @unique
  description String   @default("")
  config      Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Agent {
  id          String   @id @default(uuid())
  projectId   String
  name        String   @unique
  description String
  configJson  Json
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Dataset {
  id         String   @id @default(uuid())
  projectId  String
  name       String   @unique
  uri        String
  configJson Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Document {
  id         String   @id @default(uuid())
  projectId  String
  datasetId  String?
  content    String
  metadata   Json    @default("{}")
  embedding  Bytes?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Edge {
  id        String   @id @default(uuid())
  versionId String
  fromNode  String
  toNode    String
  label     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Export {
  id         String   @id @default(uuid())
  projectId  String
  type       String
  uri        String
  configJson Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Metric {
  id        String   @id @default(uuid())
  name      String
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Node {
  id         String   @id @default(uuid())
  versionId  String
  key        String
  label      String
  category   String
  type       String
  status     String   @default("idle")
  positionX  Float    @default(0)
  positionY  Float    @default(0)
  configJson Json     @default("{}")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Pipeline {
  id                     String   @id @default(uuid())
  projectId              String
  name                   String
  description            String   @default("")
  lastPublishedVersionId String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  deletedAt              DateTime?
}

model PipelineVersion {
  id           String   @id @default(uuid())
  pipelineId   String
  number       Int
  authorId     String?
  state        String   @default("draft")
  metadataJson Json     @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
}

model Run {
  id                String   @id @default(uuid())
  pipelineVersionId String
  authorId          String?
  mode              String
  status            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
}

model RunTask {
  id         String   @id @default(uuid())
  runId      String
  nodeId     String
  worker     String
  status     String
  attempt    Int     @default(1)
  metric     String?
  logsUri    String
  outputJson Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}

model Tool {
  id         String   @id @default(uuid())
  kind       String
  name       String
  version    String
  configJson Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deletedAt  DateTime?
}
