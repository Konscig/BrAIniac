services:
  db:
    image: postgres:14
    container_name: db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DB}
    env_file:
      - .env.docker
    ports: 
      - "${PG_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - brainiac-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PG_USER}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
      start_interval: 5s

  backend:
    build: ./backend
    container_name: api
    restart: unless-stopped
    env_file:
      - .env.docker
    environment:
      - PORT=3000
      - DATABASE_URL=${DATABASE_URL}
      - PRISMA_MIGRATE=push
      - PRISMA_DB_PUSH_ACCEPT_DATA_LOSS=1
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:3000"
    networks:
     - brainiac-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s
    command: >
      sh -c "
      npx prisma generate &&
      if [ \"$PRISMA_MIGRATE\" = \"deploy\" ]; then
        npx prisma migrate deploy;
      else
        npx prisma db push ${PRISMA_DB_PUSH_ACCEPT_DATA_LOSS:+--accept-data-loss};
      fi &&
      node dist/index.js
      "

  frontend:
    build: ./frontend
    container_name: frontend
    restart: unless-stopped
    ports:
      - 3000:80
    networks:
      - brainiac-network


networks:
  brainiac-network:
    driver: bridge

volumes:
  postgres_data:    